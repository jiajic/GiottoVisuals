% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aux_defaults.R
\name{set_default_color_continuous}
\alias{set_default_color_continuous}
\alias{set_default_color_continuous_cell}
\alias{set_default_color_continuous_poly}
\alias{set_default_color_continuous_heatmap}
\alias{set_default_color_continuous_CCcom_heatmap}
\alias{set_default_color_continuous_CCcom_dotplot}
\title{Set a default color for continuous values}
\usage{
set_default_color_continuous(
  colors = NULL,
  midpoint = NULL,
  style = c("divergent", "sequential"),
  ...,
  instr_pal,
  instr_rev,
  data_default = NULL,
  type = c("fill", "color")
)

set_default_color_continuous_cell(
  colors = NULL,
  instrs,
  midpoint = NULL,
  style = "divergent",
  ...,
  data_default = NULL
)

set_default_color_continuous_poly(
  colors = NULL,
  instrs,
  midpoint = NULL,
  style = "divergent",
  ...
)

set_default_color_continuous_heatmap(
  colors = NULL,
  instrs,
  midpoint = NULL,
  style = "divergent",
  ...
)

set_default_color_continuous_CCcom_heatmap(
  colors = NULL,
  instrs,
  midpoint = NULL,
  style = "divergent",
  ...
)

set_default_color_continuous_CCcom_dotplot(
  colors = NULL,
  instrs,
  midpoint = NULL,
  style = "divergent",
  ...,
  type = c("fill", "color"),
  data_default = list(pal = c("darkblue", "blue", "white", "red", "darkred"))
)
}
\arguments{
\item{colors}{character or \code{NULL}. 2 to n number of hex color codes or 1 single
name of a palette to use can be passed}

\item{midpoint}{numeric. midpoint value of color gradient}

\item{style}{scale color scale around \code{midpoint} (divergent) or starting from
minimum value (sequential)}

\item{\dots}{additional params to pass to respective ggplot fill_gradient functions}

\item{instr_pal, instr_rev}{used by upstream function to pass specific \code{giottoInstructions} params}

\item{data_default}{data type (e.g. cells, polys, heatmap) specific default colors to use}

\item{type}{whether setting is for ggplot2 'fill' or 'color' type function}

\item{instrs}{\code{giottoInstructions} object (output of \code{instructions(gobject)})}
}
\description{
Generates a gradient color palette based on input to \code{colors} param. Sets a
default gradient if \code{NULL} is passed.
\code{midpoint} param only supplied when using color scale with 3 colors.\cr\cr

Supports colors setting at four levels:
\itemize{
\item \strong{type specific defaults} - defaults for a specific feature or type of
plot can be passed through \code{data_default} param
\item \strong{global options} (general session setting with blanket color palette type effects)
\itemize{
\item options('giotto.color_c_pal) - palette to use. Default for 'divergent'
data is blue, white, red, for sequential, it is 'viridis'
\item options('giotto.color_c_rev) - whether colors should be reversed
}
\item \strong{giotto instructions} (gobject specific and effects specific types of plots)
\itemize{
\item run \code{showColorInstructions()} for details on options/params to set in the \code{giottoInstructions} object
}
\item \strong{function specific} (directly pass desired colors to plotting function)
\cr\cr
}
}
\section{Functions}{
\itemize{
\item \code{set_default_color_continuous()}: Framework function. Direct use should
be minimal. Specific wrapper functions should be used for each item that needs
defaults setting (plots or types of features).

}}
\examples{
\dontrun{
library(GiottoVisuals)

g <- GiottoData::loadGiottoMini("vizgen")

nr_feat_polys <- function(...) {
  spatInSituPlotPoints(g,
    polygon_fill = "nr_feats",
    polygon_fill_as_factor = F,
    polygon_feat_type = "aggregate",
    polygon_line_size = 0.1,
    polygon_alpha = 1,
    ...
  )
}

# default
nr_feat_polys()

# set global option level: viridis
options("giotto.color_c_pal" = "v")
nr_feat_polys()

# set instructions level: magma
instructions(g, "poly_color_c_pal") <- "magma"
nr_feat_polys()

instructions(g, "poly_color_c_rev") <- TRUE
nr_feat_polys()
nr_feat_polys(polygon_fill_gradient_style = "s")


# set function level: miami
instructions(g, "poly_color_c_rev") <- FALSE
nr_feat_polys(polygon_fill_gradient = "miami")

# set function level: color vector (2 to n colors)
nr_feat_polys(
  polygon_fill_gradient = c("green", "purple"),
  polygon_fill_gradient_style = "s"
)

nr_feat_polys(
  polygon_fill_gradient = c("blue", "yellow", "red"),
  polygon_fill_gradient_style = "s"
)

nr_feat_polys(
  polygon_fill_gradient = c(
    "darkgrey", "darkblue", "purple", "violet", "cyan"
  ),
  polygon_fill_gradient_style = "s"
)
}
}
